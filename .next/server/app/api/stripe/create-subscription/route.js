(()=>{var e={};e.id=4862,e.ids=[4862],e.modules={1858:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>h,routeModule:()=>m,serverHooks:()=>f,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>_});var r={};t.r(r),t.d(r,{POST:()=>d});var o=t(96559),i=t(48088),n=t(37719),a=t(32190),c=t(61223),u=t(44999),l=t(97877);console.log("=== CREATE SUBSCRIPTION ROUTE STARTED ==="),console.log("Environment check:",{hasSupabaseUrl:!!process.env.NEXT_PUBLIC_SUPABASE_URL,hasSupabaseKey:!!process.env.SUPABASE_SERVICE_ROLE_KEY,hasStripeKey:!!process.env.STRIPE_SECRET_KEY,hasBaseUrl:!!process.env.NEXT_PUBLIC_BASE_URL,hasGrowth:!!process.env.NEXT_PUBLIC_STRIPE_GROWTH_PLAN_PRICE_ID,hasProfessional:!!process.env.NEXT_PUBLIC_STRIPE_PROFESSIONAL_PRICE_ID,hasEnterprise:!!process.env.NEXT_PUBLIC_STRIPE_ENTERPRISE_PRICE_ID,nodeEnv:"production"});let p=new l.A(process.env.STRIPE_SECRET_KEY||"sk_test_placeholder");async function d(e){console.log("=== POST REQUEST RECEIVED ===");try{let s,t=(0,u.UL)(),r=(0,c.createRouteHandlerClient)({cookies:()=>t});console.log("Parsing request body...");let{priceId:o,planType:i,userId:n}=await e.json();if(console.log("Request data:",{priceId:o,planType:i,userId:n}),!n||!i)return console.log("Missing fields:",{userId:!!n,planType:!!i}),a.NextResponse.json({error:"Missing required fields"},{status:400});let l=o;if(!l){if(console.log("No priceId provided, using dynamic pricing for plan:",i),!({starter:{amount:19900,name:"Starter Plan",description:"3 active jobs, basic features"},growth:{amount:29900,name:"Growth Plan",description:"6 active jobs, 5 monthly credits"},professional:{amount:59900,name:"Professional Plan",description:"15 active jobs, 25 monthly credits"},enterprise:{amount:199900,name:"Enterprise Plan",description:"Unlimited jobs, 100 monthly credits"}})[i])return a.NextResponse.json({error:"Invalid plan type"},{status:400});l=null}console.log("Checking existing subscriptions...");let{data:d,error:m}=await r.from("subscriptions").select("*").eq("user_id",n).eq("status","active");if(m)return console.error("❌ Supabase subscription check error:",m),a.NextResponse.json({error:"Failed to check existing subscriptions",details:m.message},{status:500});if(console.log("Existing subscriptions found:",d?.length||0),d&&d.length>0){let e=d[0];return console.log("\uD83D\uDEAB Active subscription found:",e.plan_type),a.NextResponse.json({error:"You already have an active subscription",currentPlan:e.plan_type,message:`You currently have an active ${e.plan_type} plan. Please use the upgrade/downgrade options instead of purchasing a new subscription.`,shouldUpgrade:!0},{status:400})}console.log("Getting user profile...");let{data:g,error:_}=await r.from("profiles").select("stripe_customer_id, email").eq("id",n).single();if(_)return console.error("❌ Profile error:",_),a.NextResponse.json({error:"User profile not found",details:_.message},{status:404});console.log("User profile:",{hasCustomerId:!!g?.stripe_customer_id,email:g?.email});let f=g?.stripe_customer_id;if(f){console.log("Verifying existing customer in Stripe...");try{(await p.customers.retrieve(f)).deleted?(console.log("⚠️ Customer is deleted, will create new one"),f=null):console.log("✅ Existing customer verified:",f)}catch(e){console.log("⚠️ Customer not found in Stripe:",e.message),f=null}}if(f){console.log("Checking Stripe for active subscriptions...");try{let e=await p.subscriptions.list({customer:f,status:"active"});if(e.data.length>0)return console.log("\uD83D\uDEAB Found active subscription in Stripe:",e.data[0].id),a.NextResponse.json({error:"Active subscription found in Stripe",message:"You have an active subscription. Please use upgrade/downgrade options.",shouldUpgrade:!0},{status:400})}catch(e){console.log("⚠️ Could not check Stripe subscriptions:",e.message)}}if(!f){console.log("Creating/finding customer...");try{let e=await p.customers.list({email:g.email,limit:10});if(e.data.length>0){let s=e.data.find(e=>!e.deleted);s&&(f=s.id,console.log("✅ Found existing customer:",f),await r.from("profiles").update({stripe_customer_id:f}).eq("id",n))}f||(console.log("Creating new customer..."),f=(await p.customers.create({email:g.email,metadata:{userId:n,createdBy:"fieldjobs-app",createdAt:new Date().toISOString()}})).id,console.log("✅ Created new customer:",f),await r.from("profiles").update({stripe_customer_id:f}).eq("id",n))}catch(e){return console.error("❌ Customer creation failed:",e),a.NextResponse.json({error:"Failed to create customer",details:e.message},{status:500})}}if(console.log("Creating checkout session..."),console.log("Session config:",{customerId:f,priceId:l,planType:i,baseUrl:process.env.NEXT_PUBLIC_BASE_URL}),l)s={price:l,quantity:1};else{let e={starter:{amount:19900,name:"Starter Plan",description:"3 active jobs, basic features"},growth:{amount:29900,name:"Growth Plan",description:"6 active jobs, 5 monthly credits"},professional:{amount:59900,name:"Professional Plan",description:"15 active jobs, 25 monthly credits"},enterprise:{amount:199900,name:"Enterprise Plan",description:"Unlimited jobs, 100 monthly credits"}}[i];s={price_data:{currency:"usd",product_data:{name:e.name,description:e.description},unit_amount:e.amount,recurring:{interval:"month"}},quantity:1}}let h=await p.checkout.sessions.create({customer:f,payment_method_types:["card"],line_items:[s],mode:"subscription",success_url:`${process.env.NEXT_PUBLIC_BASE_URL}/employer?success=true&plan=${i}`,cancel_url:`${process.env.NEXT_PUBLIC_BASE_URL}/employer?canceled=true`,metadata:{userId:n,planType:i,isNewSubscription:"true"},subscription_data:{metadata:{userId:n,planType:i}},allow_promotion_codes:!1});return console.log("✅ Checkout session created successfully:",h.id),a.NextResponse.json({sessionId:h.id,url:h.url})}catch(e){return console.error("❌ FATAL ERROR in create-subscription:",e),console.error("Error stack:",e.stack),a.NextResponse.json({error:"Failed to create checkout session",details:e.message,stack:void 0},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/stripe/create-subscription/route",pathname:"/api/stripe/create-subscription",filename:"route",bundlePath:"app/api/stripe/create-subscription/route"},resolvedPagePath:"/Users/mattiebrooke/fieldjobs-website/app/api/stripe/create-subscription/route.js",nextConfigOutput:"",userland:r}),{workAsyncStorage:g,workUnitAsyncStorage:_,serverHooks:f}=m;function h(){return(0,n.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:_})}},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},11997:e=>{"use strict";e.exports=require("punycode")},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},34631:e=>{"use strict";e.exports=require("tls")},39727:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},47990:()=>{},55511:e=>{"use strict";e.exports=require("crypto")},55591:e=>{"use strict";e.exports=require("https")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},74075:e=>{"use strict";e.exports=require("zlib")},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79551:e=>{"use strict";e.exports=require("url")},79646:e=>{"use strict";e.exports=require("child_process")},81630:e=>{"use strict";e.exports=require("http")},91645:e=>{"use strict";e.exports=require("net")},94735:e=>{"use strict";e.exports=require("events")},96487:()=>{}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[4243,131,2190,1330,7877],()=>t(1858));module.exports=r})();